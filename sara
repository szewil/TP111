import pygame, csv, os
width=1440
height=810
window=pygame.display.set_mode((width,height))
pygame.init()
#the two upcoming classes are inspired by https://github.com/ChristianD37/YoutubeTutorials/tree/master/Tilemap
#but I modified the codes and didn't copy paste exactly
class Tile(object):
    def __init__(self,image,x,y):
        self.width=45
        self.height=45
        self.image=pygame.transform.scale(pygame.image.load(f'{image}'),(self.width,self.height))
        self.x=x
        self.y=y
        self.rect=pygame.Rect(self.x,self.y,self.width,self.height)
    def draw(self):
        window.blit(self.image,(self.x,self.y))
class TileMap():
    def __init__(self, filename,tilesize):
        self.start_x, self.start_y = 0, 0
        self.tile_size=45
        self.tiles = self.load_tiles(filename)
        self.map_surface = pygame.Surface((self.map_w, self.map_h))
        self.map_surface.set_colorkey((0, 0, 0))
        self.load_map()

    def draw_map(self, surface):
        window.blit(self.map_surface, (0, 0))

    def load_map(self):
        for lists in self.tiles:
            for tile in lists:
                tile.draw()

    def read_csv(self, filename):
        map = []
        with open(os.path.join(filename)) as data:
            data = csv.reader(data, delimiter=',')
            for row in data:
                map.append(list(row))
        return map

    def load_tiles(self, filename):
        tiles = []
        diamonds=[]
        switches=[]
        mapp = self.read_csv(filename)
        x1, y1 = 0,0
        for row in mapp:
            x1 = 0
            for tile in row:
                #tilesDic[Tile.y]=row
                if tile == '77':
                    tiles.append(Tile('grassHillRight.png', x1 * self.tile_size, y1 * self.tile_size))
                elif tile == '81':
                    tiles.append(Tile('grass.png', x1 * self.tile_size, y1 * self.tile_size))
                elif tile == '65':
                    tiles.append(Tile('grassCenter_rounded.png', x1 * self.tile_size, y1 * self.tile_size))
                elif tile == '4':
                    diamonds.append(Tile('hud_gem_blue.png', x1 * self.tile_size, y1 * self.tile_size))
                elif tile == '3':
                    diamonds.append(Tile('hud_gem_red.png', x1 * self.tile_size, y1 * self.tile_size))
                elif tile == '6':
                    diamonds.append(Tile('keyBlue.png', x1 * self.tile_size, y1 * self.tile_size))
                elif tile == '5':
                    diamonds.append(Tile('keyRed.png', x1 * self.tile_size, y1 * self.tile_size))
                elif tile == '86':
                    switches.append(Tile('switchRight.png', x1 * self.tile_size, y1 * self.tile_size))

                #add boxes and the keys and values
                    # Move to next tile in current row
                x1 += 1

            # Move to next row
            y1 += 1
            # Store the size of the tile map
        self.map_w, self.map_h = 2240, 1260
        return [tiles]+[switches]+[diamonds]
level=TileMap("levelmap2.csv",45)
level.draw_map(window)
tiles=level.load_tiles("levelmap2.csv")
class Character(object):
    def __init__(self,image,x,y,left):
        self.x=x
        self.y=y
        self.dx=5
        self.dy=10
        self.initialy=y
        self.width=40
        self.height=70
        self.state="standing"
        self.acc=10
        self.left=left
        self.image=pygame.transform.scale(pygame.image.load(f'{image}'),(self.width,self.height))
        self.rect=pygame.Rect(self.x,self.y,self.width,self.height)
    def checkCollision(self,other):
        if other =="tiles":
            for i in tiles[0]:
                tilerect=pygame.Rect(i.x,i.y,45,45)
                print(pygame.Rect.colliderect(self.rect,tilerect))
                print(tilerect.x)
                if pygame.Rect.colliderect(self.rect,tilerect):
                    if self.x+self.rect.width+self.dx>tilerect.x:
                        self.dx= tilerect.x- self.rect.x+self.rect.width
                        return self.dx,"right"
                    elif self.x<tilerect.x+tilerect.width:
                        self.dx=self.rect.x-tilerect.x+tilerect.width
                        return self.dx,"left"
                    elif self.recty-self.dy < tilerect.y+tilerect.height:
                        dy= tilerect.y+tilerect.height - self.rect.y
                        return self.dy,"up"
                    elif self.rect.y+self.rect.height+dy > tilerect.y:
                        self.dy=tilerect.y-self.rect.y+self.rect.height
                        return self.dy,"down"
                else:
                    return 0,False
        elif other=="boxes":
            for i in range(boxes):
                if boxes[i].colliderect(self.rect.x+self.dx,self.rect.y, self.width,self.height):
                    if self.rect.x+self.rect.width+self.dx>boxes[i].get_rect().x:
                        return self.dx,"right"
                    elif boxes[i].get_rect().x+boxes[i].get_rect().width>self.rect.x:
                        return self.dx,"left"
                elif boxes[i].colliderect(self.rect.x,self.rect.y+self.dy, self.width,self.height):
                    if self.recty-self.dy < boxes[i].get_rect().y+boxes[i].get_rect().height:
                        return self.dy,"up"
                    if self.rect.y+self.rect.height+dy > boxes[i].get_rect().y:
                        return self.dy,"down"
                else:
                    return 0,False
    def drawCharacter(self):
        keyPressed=pygame.key.get_pressed()
        if self.state=="standing" or self.state=="moving":              
#if player is using arrows to move            
            if self.left=="LEFT":
#consequenses of collision after  pressing left              
                if keyPressed[pygame.K_LEFT]:
                    if self.checkCollision("tiles")[1]==False: #and self.x-self.dx>20:
                        self.x-=self.dx
                    elif self.checkCollision("tiles")[1]=="left":
                        self.x-=self.checkCollision("tiles")[0]
                    elif self.checkCollision("tiles")[1]=="up":
                        self.y-=self.checkCollision("tiles")[0]
                    elif self.checkCollision("tiles")[1]=="down":
                        self.y+=self.checkCollision("tiles")[0]
 #consequenses of collision after pressing right               
                elif keyPressed[pygame.K_RIGHT]:
                    if self.checkCollision("tiles")[1]==False: #self.x+self.dx<width-50:
                        self.x+=self.dx
                    elif self.checkCollision("tiles")[1]=="left":
                        self.x+=self.checkCollision("tiles")[0]
                    elif self.checkCollision("tiles")[1]=="up":
                        self.y-=self.checkCollision("tiles")[0]
                    elif checkCollision("tiles")[1]=="down":
                        self.y+=self.checkCollision("tiles")[0]
#if the player is using awd keys            
            else:
                if keyPressed[pygame.K_a]:
                    if checkCollision(self,"tiles")[1]==False: #and self.x-self.dx>20:
                        self.x-=self.dx
                    elif checkCollision(self,"tiles")[1]=="left":
                        self.x-=checkCollision(self,"tiles")[0]
                    elif checkCollision(self,"tiles")[1]=="up":
                        self.y-=checkCollision(self,"tiles")[0]
                    elif checkCollision(self,"tiles")[1]=="down":
                        self.y+=checkCollision(self,"tiles")[0]
    #consequenses of collision after pressing right               
                elif keyPressed[pygame.K_d]:
                    if checkCollision(self,"tiles")==False: #self.x+self.dx<width-50:
                        self.x+=self.dx
                    elif checkCollision(self,"tiles")[1]=="left":
                        self.x+=checkCollision(self,"tiles")[0]
                    elif checkCollision(self,"tiles")[1]=="up":
                        self.y-=checkCollision(self,"tiles")[0]
                    elif checkCollision(self,"tiles")[1]=="down":
                        self.y+=checkCollision(self,"tiles")[0]      
            window.blit(self.image,(self.x,self.y))
levelimg=pygame.image.load('screenshot.png')
def main():
    level.draw_map(window)
    boy=Character('BoyR1.png',100,567,"LEFT")
    run=True
    clock = pygame.time.Clock()
    while run:
        level.draw_map(window)
        clock.tick(60)
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                run =False
        level.draw_map(window)
        boy.drawCharacter()
        #window.blit(levelimg,(0,0))
        window.blit(boy.image,(boy.x,boy.y))
        pygame.display.update()
    pygame.quit()
if __name__=="__main__":
